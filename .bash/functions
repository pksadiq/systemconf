# -*- mode: shell-script; -*-

PING_IP="8.8.8.8"
PING_URL="www.google.com"

# ANSI colors
RED="\e[01;31m"
GREEN="\e[01;32m"
RESET="\e[0m"

say ()
{
  LEVEL="$1"
  MESSAGE="$2"

  case "${LEVEL,,}" in
    ok)
      COLOR="$GREEN"
      ;;
    fail)
      COLOR="$RED"
      ;;
  esac
  
  echo -e "$COLOR""${MESSAGE}" "${RESET}"
}

mypingip ()
{
  echo -n "Ping IP: "
  ping -W 10 -c 1 "${PING_IP}" >/dev/null 2>&1 && say ok "OK" && return 0
  say fail "Fail" && return 1
}

mypingnet ()
{
  echo -n "Ping URL: "
  ping -W 10 -c 1 "${PING_URL}"  >/dev/null 2>&1  && say ok "OK" && return 0
  say fail "Fail" && return 1
}

mynetip ()
{
  ROUTES="$(ip route show 2>/dev/null)"

  if [ -z "${ROUTES}" ]
  then
    say fail "No Route found"
    return 1
  fi

  # Get public IP address. 208.67.222.222 is IP of "resolver1.opendns.com"
  # IP used to not rely on local DNS resolution
  dig +short myip.opendns.com @208.67.222.222 2>/dev/null || say fail "Failed"
}

# Print machine IPs that are not host specific (ie, not 127.0.... or ::1...)
mylocalip ()
{
  IP_LIST="$(ip addr show scope global)"
  awk -F' ' '/inet/ {print $2}'  <<< "${IP_LIST}"
}

# Print IP routes, ie, the Gateways to reach other networks
mygateway ()
{
  IP_LIST="$(ip route show)"
  awk '!/default dev|\//{ gsub("default via",""); print $1 }' <<< "${IP_LIST}"
}

set_ps1 ()
{
  # Colored PS1
  # If user is `root' set color as red, else green
  if [ "$UID" -eq 0 ]
  then
    PS1='$(echo -e $STAT)\[\e[01;31m\]\u@\h\[\e[01;35m\]${REMOTE_PS1}\[\e[0m\]:\[\e[01;34m\]\w\[\e[0m\]\$ '
  else
    PS1='$(echo -e $STAT)\[\e[01;32m\]\u@\h\[\e[01;35m\]${REMOTE_PS1}\[\e[0m\]:\[\e[01;34m\]\w\[\e[0m\]\$ '
  fi

  MY_PS_SET=""
}

set_my_ps1 ()
{
  # Reset to old PS1 if my_ps1 is set already, and return
  [ -n "${MY_PS_SET}" ] && set_ps1 && return
  
  if [ "$UID" -eq 0 ]
  then
    PS1='$(echo -e $STAT)\[\e[01;35m\]${REMOTE_PS1}\[\e[01;34m\]\W\[\e[01;31m\]#\[\e[0m\] '
  else
    PS1='$(echo -e $STAT)\[\e[01;35m\]${REMOTE_PS1}\[\e[01;34m\]\W\[\e[01;32m\]\$\[\e[0m\] '
  fi

  MY_PS_SET="true"
}

# Set Term title in Titlebar
set_term_title ()
{
  case "$TERM" in
    xterm*|rxvt*)
      PS1="\[\e]0;\u@\h${REMOTE_PS1}: \w\a\]$PS1"
      ;;
    *)
      ;;
  esac
}

is_battery_present ()
{
  BAT="$(grep -il 'battery' /sys/class/power_supply/*/type 2>/dev/null)" ||
    return $(false)

  BAT=$(sed 's/type/capacity/' <<< "$BAT")
}

get_battery_percent_to_file ()
{
  is_battery_present || return $(false)

  # /tmp is not guaranteed to be on tempfs, so using shm for a while
  STATUS_FILE="/dev/shm/bat-status"
  [ -f "$STATUS_FILE" ] || touch "$STATUS_FILE" || return 1

  # Update battery status every 20 seconds
  while sleep 20
  do
    NEW="$(find /dev/shm -maxdepth 1 -mmin 0.3 -name bat-status)"
    # Mutex can be used in shell scripts too!
    if flock -n "$STATUS_FILE" true && [ -z $NEW ]
    then
      PERCENT="$(grep -h "[0-9]" $BAT | tr '\n' '+')"
      flock "$STATUS_FILE" bc <<< "${PERCENT%+}" > "$STATUS_FILE"
    fi
  done
}

set_battery_ps1 ()
{
  WARNING="\e[01;33m"'!'
  DANGER="\e[01;31m"'!'
  STATUS_FILE="/dev/shm/bat-status"
  [ -f "$STATUS_FILE" ] || return 1

  PERCENT=$(cat "$STATUS_FILE")
  if [ $PERCENT -le 10 ]
  then
    STAT="$DANGER"
  elif [ $PERCENT -le 20 ]
  then
    STAT="$WARNING"
  fi
}


mynettest ()
{
  ROUTE="$(ip route show)"
  [ -z "$ROUTE" ] && say fail "No Route found" && return 1

  echo -n "Gateway: "
  mygateway

  echo -n "Local IP: "
  mylocalip

  echo -n "Nameserver: "
  grep "^nameserver" /etc/resolv.conf | cut -d ' ' -f 2-

  echo -n "Net IP: "
  mynetip

  mypingip
  mypingnet
}
